package Ubicables.Unidades;

import Exceptions.*;
import Jugador.Jugador;
import Jugador.ManejadorDeRecursos;
import Tablero.Posicion;
import Turnos.Ocupado;
import Ubicables.Edificios.Cuartel;
import Ubicables.Edificios.PlazaCentral;

public class Aldeano extends Unidad {
    Jugador dueño;

    public Aldeano(Posicion posicionRecibida, Jugador jugador) throws PosicionFueraDeRangoException {
        super(50,posicionRecibida);
        Jugador dueño = jugador;
        posicionRecibida.getMapa().ocuparCelda(this, posicionRecibida);
        dueño.agregar(this);
    }

    public PlazaCentral crearPlazaCentral(Posicion posicionCostruccion) throws UbicableEstaOcupadoException, PosicionFueraDeRangoException, NoSePudoConstruirException {
        if(estado.estaOcupado()){
            throw new UbicableEstaOcupadoException();
        }
        if(!dueño.CrearPlazaCentral()){
            throw new NoSePudoConstruirException();
        }
        estado = new Ocupado(3);

        PlazaCentral plazaCentral = new PlazaCentral(posicionCostruccion,dueño);
        dueño.agregar(plazaCentral);
        return plazaCentral;
    }

    public Cuartel crearCuartel(Posicion posicionCostruccion) throws UbicableEstaOcupadoException, PosicionFueraDeRangoException, NoSePudoConstruirException {
        if(estado.estaOcupado()){
            throw new UbicableEstaOcupadoException();
        }
        if(!dueño.CrearPlazaCentral()){
            throw new NoSePudoConstruirException();
        }
        estado = new Ocupado(3);

        Cuartel cuartel = new Cuartel(posicionCostruccion,dueño);
        dueño.agregar(cuartel);
        return cuartel;
    }


    public void quitarVida(int dañoRecibido) {
        vida -= dañoRecibido;
        if(vida < 1){
            estado = new Ocupado(100); //estado = new Muerto(); EL ESTADO MUERTO NO ESTA POR AHORA NO PARECE SER NECESARIO
        }
    }

    @Override
    public boolean estaMuerto() {
        return vida<1; //estado.estaMuerto();
    }
}
