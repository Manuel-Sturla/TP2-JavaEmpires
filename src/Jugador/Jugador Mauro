package Jugador;

import Exceptions.OroInsuficienteException;
import Exceptions.UnidadesMaximasException;
import Ubicables.Ubicable;
import cucumber.api.java.it.Ma;

import java.util.ArrayList;
import java.util.Iterator;

public class Jugador {

    ArrayList elementos = new ArrayList();
    Iterator<Ubicable> iterador;
    String nombre;
    ManejadorDeRecursos manejador;

    /* obsoleto?
    public Jugador(Aldeano aldeanos[], Castillo castillo){
        //Crea al jugador con sus 3 aldeanos iniciales y su castillo
        elementos[0] = castillo;
        for (int i =1; i<3; i++){
            elementos[i]=aldeanos[i-1];
        }
    }
*/
    //Constructor que recibe coleccion! de ubicab+les generica y los agrega
    public Jugador(ManejadorDeRecursos verificador){
        elementos = new ArrayList();
        manejador = verificador;
    }

    public void inicializarJuego(){
    }

    public ArrayList <Ubicable> getElementos() {
        return new ArrayList<Ubicable>(elementos);
    }

    public Ubicable iniciarTurno() {
        iterador = elementos.iterator();
        return this.siguiente();
    }

    public Ubicable siguiente(){
        if (!iterador.hasNext()){
            this.finalizarTurno();
            return null;
        }
        return iterador.next();
    }

    public void finalizarTurno(){
        iterador = elementos.iterator();
        while (iterador.hasNext()){
            if(iterador.next().estaMuerto()){
                iterador.remove();
            }
        }
        //Le avisa al manejador de turnos que termino el turno
    }

    public void agregar(Ubicable elemento) {
        elementos.add(elementos.size(),elemento);
    }


    public boolean CrearPlazaCentral(){
        try {
            manejador.CrearPlazaCentral();
        } catch (OroInsuficienteException e) {
            return false;
        }
         return true;
    }

    /*public void nuevoAldeano() {
        manejador.nuevoAldeano();
    }*/

    public boolean CrearAldeano() {
        try {
            manejador.CrearAldeano();
        }   catch (OroInsuficienteException | UnidadesMaximasException e){
            return false;
        }
        return true;
    }

    public boolean CrearEspadachin() {
        try {
            manejador.CrearEspadachin();
        }   catch (OroInsuficienteException | UnidadesMaximasException e){
            return false;
        }
        return true;
    }

    public void nuevaUnidad() {
        manejador.AgregarUnidades(1);
    }
}
